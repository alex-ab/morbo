# -*- Mode: Python -*-

smp_ap_code = "AP_CODE=0x1000"

c_cc_flags  = "-Os -minline-all-stringops -m32 -march=pentium -mtune=core2"
c_cc_flags += " -pipe -ffreestanding -nostdlib -Wno-multichar -Wall -Werror -Wno-address-of-packed-member"
c_cc_flags += " -ffunction-sections -fomit-frame-pointer -fno-stack-protector -mregparm=3 -D" + smp_ap_code

freestanding_env = Environment()

freestanding_env['CCFLAGS']   = c_cc_flags
freestanding_env['CFLAGS']    = c_cc_flags
freestanding_env['LINKFLAGS'] = "-m elf_i386 -gc-sections -N"
freestanding_env['LINK']      = "ld"
freestanding_env['ASFLAGS']   = "-O5 -f elf32 -D" + smp_ap_code

def CheckCommand(context, cmd):
       context.Message('Checking for %s command... ' % cmd)
       result = WhereIs(cmd)
       context.Result(result is not None)
       return result

conf = Configure(freestanding_env, custom_tests = {'CheckCommand' : CheckCommand})

if not conf.CheckCommand("yasm"):
    if not conf.CheckCommand("nasm"):
        print("Please install yasm or nasm!")
        Exit(1)
    else:
        conf.env['AS'] = "nasm"
else:
    conf.env['AS'] = "yasm"

if not (conf.CheckCHeader("stdint.h") and
        conf.CheckCHeader("stdarg.h")):
    print("Standard C headers are missing.")
    Exit(1)

freestanding_env = conf.Finish()

fenv = freestanding_env.Clone()

fenv16 = Environment()
fenv16['CCFLAGS']  = "-Os -minline-all-stringops -m16 -march=pentium -mtune=core2 -pipe -ffreestanding -nostdlib -Wno-multichar -Wall -Werror"
fenv16['CCFLAGS'] += " -ffunction-sections -fomit-frame-pointer -fno-stack-protector -mregparm=3 -fno-pic"
fenv16['CPPPATH'] = ["../include", "include/"]

stand = fenv.StaticLibrary('stand',
                           [ 'elf.c',
                             'hexdump.c',
                             'mbi.c',
                             'mbi2.c',
                             'mbi-tools.c',
                             'pci.c',
                             'pci_db.c',
                             'printf.c',
                             'reboot.c',
                             'serial.c',
                             'start.asm',
                             'util.c',
                             'version.c',
                             'vga.c',

                             # libc stuff
                             'memcpy.c',
                             'memcmp.c',
                             'memset.c',
                             'strlen.c',

                             # FreeBSD libc stuff
                             'strncmp.c',
                             'strncpy.c',
                             'strtok.c',
                             'strtoull.c',
                             'qdivrem.c',
                             ])

tinf = fenv.StaticLibrary('tinf',
                          [ 'tinflate.c',
                            'tinfgzip.c',
                            'tinfzlib.c',
                            'adler32.c',
                            'crc32.c',
                            ])

microcode = fenv.StaticLibrary('microcode', [ 'microcode.c', 'acpi.c' ])

plugins = fenv16.StaticLibrary('plugins', [ 'intel_hwp_16.cc' ])

fenv['CPPPATH'] = ["../include", "include/"]
fenv['LIBPATH'] = ['.']

fenv_bender = fenv.Clone()

fenv['LINKFLAGS'] += " -T " + File('morbo.ld').srcnode().path
fenv_bender['LINKFLAGS'] += " -T " + File('bender.ld').srcnode().path + " -defsym=" + smp_ap_code

# Execute git describe somewhere where our code is. This is useful,
# when this SConscript is used by third-party scons build systems
# directly.
AlwaysBuild(Command('version.inc', ['include/version.h'], """( cd `dirname $SOURCE` && git describe --dirty || echo UNKNOWN ) | sed 's/^\\(.*\\)$/"\\1"/' > $TARGET"""))

def DoInstall(prog):
    Depends(prog, 'morbo.ld')
    Depends(prog, 'bender.ld')
    Install('../tftp', prog)

# Morbo

DoInstall(fenv.Program('morbo',
                       [ 'crc16.c',
                         'morbo.c',
                         'ohci.c' ],
                       LIBS=['stand', 'tinf', 'plugins']))

# Zapp

DoInstall(fenv.Program('zapp',
                       [ 'acpi.c',
                         'zapp.c',
                         ],
                       LIBS=['stand', 'tinf', 'plugins']))

# Bender

DoInstall(fenv.Program('bender', [ 'bender.c', 'smp.c', 'intel_hwp.cc' ],
                       LIBS=['stand', 'tinf', 'microcode', 'plugins']))

# Unzip

DoInstall(fenv.Program('unzip',
                       [ 'unzip.c',
                         ],
                       LIBS=['stand', 'tinf', 'plugins']))

# Farnsworth

DoInstall(fenv.Program('farnsworth',
                       [ 'farnsworth.c',
                         ],
                       LIBS=['stand', 'tinf', 'plugins']))

# Performance tests

DoInstall(fenv.Program('basicperf',
                       [ 'basicperf.c' ],
                       LIBS=['stand', 'plugins']))

# EOF
